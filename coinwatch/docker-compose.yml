services:
  # Infrastructure
  postgres:
    image: timescale/timescaledb:latest-pg16
    environment:
      POSTGRES_USER: coinwatch
      POSTGRES_PASSWORD: coinwatch
      POSTGRES_DB: coinwatch
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
      POSTGRES_MAX_CONNECTIONS: "100"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coinwatch"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring services
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://coinwatch:coinwatch@postgres:5432/coinwatch?sslmode=disable"
    ports:
      - "9187:9187"
    volumes:
      - type: bind
        source: ./queries.yaml
        target: /etc/postgres_exporter/queries.yaml
        read_only: true
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_config:/etc/prometheus
    depends_on:
      monitor:
        condition: service_started
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  prometheus-config-init:
    image: busybox
    volumes:
      - prometheus_config:/etc/prometheus
    command: >
      sh -c "echo 'global:
        scrape_interval: 15s
        evaluation_interval: 15s

      scrape_configs:
        - job_name: \"monitor\"
          static_configs:
            - targets: [\"monitor:8003\"]' > /etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started


  # Application Services
  market_data:
    build:
      context: .
      dockerfile: services/market_data/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8001:8001"
    volumes:
      - ./logs/market_data:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  fundamental_data:
    build:
      context: .
      dockerfile: services/fundamental_data/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8002:8002"
    volumes:
      - ./logs/fundamental_data:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  monitor:
    build:
      context: .
      dockerfile: services/monitor/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
      market_data:
        condition: service_started
      fundamental_data:
        condition: service_started
    ports:
      - "8003:8003"
    volumes:
      - ./logs/monitor:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
    depends_on:
      redis:
        condition: service_healthy
      market_data:
        condition: service_started
      fundamental_data:
        condition: service_started
      monitor:
        condition: service_started
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  prometheus_config:
