version: '3.8'

services:
  # Infrastructure
  postgres:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_USER: coinwatch
      POSTGRES_PASSWORD: coinwatch
      POSTGRES_DB: coinwatch
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coinwatch"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Application Services
  market_data:
    build:
      context: .
      dockerfile: services/market_data/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8001:8001"

  fundamental_data:
    build:
      context: .
      dockerfile: services/fundamental_data/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8002:8002"

  monitor:
    build:
      context: .
      dockerfile: services/monitor/Dockerfile
    env_file: .env
    environment:
      - DB_HOST=postgres
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8003:8003"

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    env_file: .env
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      market_data:
        condition: service_started
      fundamental_data:
        condition: service_started
      monitor:
        condition: service_started
    ports:
      - "8000:8000"

volumes:
  postgres_data:
  redis_data:
